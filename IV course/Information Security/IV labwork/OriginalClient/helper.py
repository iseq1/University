import hashlib
import secrets



def generate_sw() -> str:
    """
    Генерация случайной 128-битной строки.

    Использует secrets.token_hex() для создания криптографически стойкой
    случайной последовательности.

    Args:
        Нет аргументов

    Returns:
        str: Случайная строка из 32 шестнадцатеричных символов

    Примеры:
        generate_sw() -> "f7a9c2b4e1d8f3a6c5b2e7d4f1a8c3b9"
    """
    # secrets.token_hex(n) генерирует n случайных байт и
    # преобразует их в шестнадцатеричную строку
    # 16 байт * 8 = 128 бит
    # Каждый байт кодируется 2 hex символами
    # Поэтому на выходе получаем строку длиной 32 символа (16 * 2)
    return secrets.token_hex(16)


def hash_md5(data: str) -> str:
    """
    MD5 хеширование строки.
    Принимает строку и возвращает её MD5 хеш в виде 32-символьной hex строки.

    Args:
        data (str): Входная строка для хеширования

    Returns:
        str: MD5 хеш в шестнадцатеричном представлении
    """
    # encode() конвертирует строку в байты, так как md5 работает с байтами
    # По умолчанию использует UTF-8 кодировку
    # Пример: "hello" -> b"hello"

    # hashlib.md5() создает объект хеширования MD5
    # После хеширования получаем 16-байтовое значение

    # hexdigest() конвертирует 16 байт хеша в 32-символьную строку в hex формате
    # Каждый байт представляется двумя hex цифрами
    # Пример: b"\x5d\x41\x40" -> "5d4140"
    return hashlib.md5(data.encode()).hexdigest()