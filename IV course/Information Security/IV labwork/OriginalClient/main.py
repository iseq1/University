import socket
import threading
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import scrolledtext, messagebox

from RSA import RSA
from Diffie_Hellman import DiffieHellman
from user_database import UserDatabase
from RC4 import RC4
from helper import generate_sw, hash_md5


class OriginalClient:
    def __init__(self, root, host='localhost', port=5000,):
        self.root = root
        self.root.title("–û—Å–Ω–æ–≤–Ω–æ–π –ö–ª–∏–µ–Ω—Ç")
        self.host = host
        self.port = port
        self.db = UserDatabase()
        self.client_wait_form()
        self.conn = None
        self.rc4 = None
        self.rsa = None
        self.companion_e, self.companion_n = None, None

    def client_wait_form(self):
        self.label_login = tk.Label(root, text="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        self.label_login.grid(row=1, column=1, padx=10, pady=10)

    def build_chat_interface(self):
        self.clear_page()
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —á–∞—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (–±–æ–ª—å—à–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
        self.chat_display = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, state='normal', height=20, width=80)
        self.chat_display.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")
        self.chat_display.tag_configure("name_C", foreground="#3CB371", font=("Arial", 10, "italic", "bold"))
        self.chat_display.tag_configure("post_message_C", foreground="#FFA07A")
        self.chat_display.tag_configure("name_OC", foreground="#4682B4", font=("Arial", 10, "italic", "bold"))
        self.chat_display.tag_configure("post_message_OC", foreground="#FFA07A")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_entry = tk.Entry(self.root, width=60)
        self.message_entry.grid(row=1, column=0, padx=10, pady=5, sticky="we")

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.send_button = tk.Button(self.root, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message)
        self.send_button.grid(row=1, column=1, padx=10, pady=5, sticky="e")

        self.generate_key_button = tk.Button(self.root, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", command=self.generate_keys)
        self.generate_key_button.grid(row=2, column=0, padx=10, pady=10, sticky="w")

        self.send_keys_button = tk.Button(self.root, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_keys, state="disabled")
        self.send_keys_button.grid(row=2, column=1, padx=10, pady=10, sticky="e")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        self.root.grid_rowconfigure(0, weight=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.root.grid_columnconfigure(0, weight=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        self.root.grid_columnconfigure(1, weight=0)  # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã

    def go_to_chat(self, conn):
        self.conn = conn
        self.trade_keys(conn)  # –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏
        self.conn.settimeout(None)

        self.build_chat_interface()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        receive_thread = threading.Thread(target=self.receive_message, daemon=True)
        receive_thread.start()

    def trade_keys(self, conn):
        conn.settimeout(10.0)

        data = conn.recv(4096).decode()
        # –ü–æ–ª—É—á–∞–µ–º A, g, p –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        A, g, p = map(int, data.split('|'))

        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:")
        print(f"A: {A}")
        print(f"g: {g}")
        print(f"p: {p}")

        diffie_hellman = DiffieHellman(g=g, p=p)
        # b - 64-–±–∏—Ç–Ω–æ–µ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ b: {diffie_hellman.b}")

        # –í—ã—á–∏—Å–ª—è–µ–º B = g^b mod p
        B = diffie_hellman.make_B()
        print(f"–í—ã—á–∏—Å–ª–µ–Ω–æ B: {B}")

        conn.send(str(B).encode())
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ B: {B}")

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∞–Ω—Å–æ–≤—ã–π –∫–ª—é—á K = A^b mod p
        K = diffie_hellman.make_K(A, diffie_hellman.b, p)
        print(f"–í—ã—á–∏—Å–ª–µ–Ω —Å–µ–∞–Ω—Å–æ–≤—ã–π –∫–ª—é—á K: {K}")
        self.rc4 = RC4(str(K))

    def generate_keys(self):
        self.rsa = RSA()
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏ RSA: e={self.rsa.e}, n={self.rsa.n}, d={self.rsa.d}")
        self.send_keys_button.config(state="normal")

    def send_keys(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞ –∫–ª–∏–µ–Ω—Ç—É."""
        if self.rsa.e is not None and self.rsa.n is not None:
            public_key = f"RSA-KEYS|{self.rsa.e}|{self.rsa.n}"
            encrypted_key = self.rc4.encrypt(public_key)
            if self.conn:
                try:
                    self.conn.send((encrypted_key + "\n").encode())
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á: e={self.rsa.e}, n={self.rsa.n}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞: {e}")
                    self.conn.close()

    def send_message(self):
        message = self.message_entry.get()
        if message and message!="":
            try:
                # –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RC4 –∏ –∫–ª—é—á–∞ K
                encrypted_message = self.rc4.encrypt(message)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (conn)
                self.conn.send(encrypted_message.encode())

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                premessage = 'üìç'
                name = f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç: "
                postmessage = f" ({encrypted_message})\n"

                self.chat_display.insert(tk.END, premessage)
                self.chat_display.insert(tk.END, name, "name_OC")
                self.chat_display.insert(tk.END, message)
                self.chat_display.insert(tk.END, postmessage, "post_message_OC")


                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                self.message_entry.delete(0, tk.END)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.conn.close()  # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–∫–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    def receive_message(self):
        try:
            # print(f"Receiving messages from: {self.conn}")
            while True:
                if not self.conn.fileno() == -1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–∫–µ—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                    encrypted_message = self.conn.recv(1024).decode()
                    if not encrypted_message:
                        break

                    decrypted_message = self.rc4.decrypt(encrypted_message)

                    if str(decrypted_message).startswith("RSA-KEYS"):
                        tag, self.companion_e, self.companion_n = str(decrypted_message).split('|')
                        print(f'–ü–æ–ª—É—á–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á Client: e={self.companion_e}, n={self.companion_n}')
                    elif str(decrypted_message).startswith("ECP|"):
                        tag, file_data, signature = str(decrypted_message).split('|')
                        self.verify_signature(file_data=file_data, signature=signature)
                    else:
                        premessage = 'üí¨'
                        name = f"–ö–ª–∏–µ–Ω—Ç: "
                        postmessage = f" ({encrypted_message})\n"

                        self.chat_display.insert(tk.END, premessage)
                        self.chat_display.insert(tk.END, name, "name_C")
                        self.chat_display.insert(tk.END, decrypted_message)
                        self.chat_display.insert(tk.END, postmessage, "post_message_C")

                else:
                    print('–°–æ–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω')
                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def verify_signature(self, file_data, signature):
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_data}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π X: {signature}")
        # H` - —Ö–µ—à —Ñ–∞–π–ª–∞
        file_hash = hash_md5(file_data)
        print(f"–•–µ—à —Ñ–∞–π–ª–∞: {file_hash}")

        import re

        cleaned_signature = re.sub(r'\D', '', signature)

        # Z = X^e mod n
        calculated_hash = self.rsa.mod_exp(int(re.sub(r'\D', '', signature)), int(re.sub(r'\D', '', self.companion_e)), int(re.sub(r'\D', '', self.companion_n)))
        print(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è (Z): {calculated_hash}")

        if int(file_hash, 16) == calculated_hash:
            messagebox.showinfo('–ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞', '–ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω–∞.')
            print(f"H`: {int(file_hash, 16)}")
            print(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è (Z): {calculated_hash}")
            print("–ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –≤–µ—Ä–Ω–∞.")
        else:
            messagebox.showerror('–ü–æ–¥–ø–∏—Å—å –Ω–µ–≤–µ—Ä–Ω–∞', '–ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –Ω–µ–≤–µ—Ä–Ω–∞.')
            print("–ü–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –Ω–µ–≤–µ—Ä–Ω–∞.")
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
            print(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (Z): {calculated_hash}")

    def clear_page(self):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        for widget in self.root.winfo_children():
            widget.destroy()

    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((self.host, self.port))
        server_socket.listen(5)
        print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")

        while True:
            client_socket, addr = server_socket.accept()
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç: {addr}")
            client_thread = threading.Thread(target=self.user_authentication, args=(client_socket,))
            client_thread.start()

    def user_authentication(self, conn):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º —Å–ª–æ–≤–∞-–≤—ã–∑–æ–≤–∞."""
        try:
            login = conn.recv(1024).decode('utf-8')
            print(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {login}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success, message, data = self.db.get_user(login)
            if not success:
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ NOT_FOUND...")
                conn.send("NOT_FOUND")
                # self.close()
                # self.close_window_signal.emit()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                # conn.send("–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω".encode('utf-8'))
                return False


            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞-–≤—ã–∑–æ–≤–∞ (128-–±–∏—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            sw = generate_sw()
            sw_time = datetime.now() + timedelta(hours=24)
            print(f"SW: {sw}, Time: {sw_time}")

            self.db.update_user_auth(login, sw, sw_time)

            # –•—ç—à–∏—Ä—É–µ–º —Å–ª–æ–≤–æ-–≤—ã–∑–æ–≤
            sw_hash = hash_md5(sw)
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à sw: {sw_hash}")
            conn.send(sw_hash.encode('utf-8'))

            # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à S –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            s_hash = conn.recv(1024).decode('utf-8')
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ö–µ—à s –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {s_hash}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–æ–≤–∞-–≤—ã–∑–æ–≤–∞
            stored_password = data[1]
            print('stored_password:', stored_password)
            server_hash = hash_md5(hash_md5(sw) + stored_password)
            print(f"–•–µ—à s` –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ: {server_hash}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ s` = s
            if s_hash != server_hash:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Ç–ø—Ä–∞–≤–∫–∞ WRONG_PASSWORD...")
                conn.send("WRONG_PASSWORD".encode('utf-8'))
                # self.close()
                # self.close_window_signal.emit()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                return False

            print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ SUCCESS...")
            conn.send("SUCCESS".encode('utf-8'))
            self.go_to_chat(conn)



        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        # finally:
        #     conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    client1 = OriginalClient(root)
    threading.Thread(target=client1.start_server, daemon=True).start()

    root.mainloop()
